{"version":3,"sources":["searchField.js","cards.js","App.js","serviceWorker.js","index.js"],"names":["SearchField","onSearch","onEnter","className","type","placeholder","onChange","onKeyDown","Card","data","country","active","cases","deaths","recovered","todayCases","todayDeaths","critical","totalTests","casesPerOneMillion","deathsPerOneMillion","testsPerOneMillion","App","onSearchChange","event","setState","searchField","target","value","a","key","fetch","state","response","json","data_country","data_global","this","response_country","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAceA,EAZK,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,SAASC,EAAa,EAAbA,QAC9B,OACC,yBAAKC,UAAU,cACd,2BACAC,KAAK,SACLC,YAAY,OACZC,SAAUL,EACVM,UAAWL,MCaCM,EApBF,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAEd,OACC,yBAAKN,UAAU,SACd,4BAAKM,EAAKC,SACV,sCAAYD,EAAKE,QACjB,qCAAWF,EAAKG,OACV,qCAAWH,EAAKI,QAChB,yCAAeJ,EAAKK,WACpB,2CAAiBL,EAAKM,YACtB,2CAAiBN,EAAKO,aACtB,wCAAcP,EAAKQ,UACnB,2CAAiBR,EAAKS,YACtB,iDAAuBT,EAAKU,oBAC5B,kDAAwBV,EAAKW,qBAC7B,kDAAwBX,EAAKY,sBCwCvBC,E,kDAlDb,aAAc,IAAD,8BACX,gBAiBFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAnB9B,EAsBb1B,QAtBa,uCAsBH,WAAOsB,GAAP,iBAAAK,EAAA,yDACU,UAAdL,EAAMM,IADF,gCAGiBC,MAAM,sDAAD,OAAuD,EAAKC,MAAMN,cAHxF,cAGAO,EAHA,gBAIaA,EAASC,OAJtB,OAIAzB,EAJA,OAKN,EAAKgB,SAAS,CAAEU,aAAc1B,IALxB,2CAtBG,sDAEX,EAAKuB,MAAQ,CACXI,YAAa,GACbV,YAAa,GACbS,aAAc,IALL,E,sMAUYJ,MAAM,gD,cAAvBE,E,gBACaA,EAASC,O,cAAtBzB,E,OACN4B,KAAKZ,SAAS,CAAEW,YAAa3B,I,SACEsB,MAAM,4D,cAA/BO,E,iBACqBA,EAAiBJ,O,QAAtCC,E,OACNE,KAAKZ,SAAS,CAAEU,aAAcA,I,sIAiB9B,OACE,6BACE,yBAAKhC,UAAU,OACb,sCACA,qCAAWkC,KAAKL,MAAMI,YAAYxB,OAClC,qCAAWyB,KAAKL,MAAMI,YAAYvB,QAClC,yCAAewB,KAAKL,MAAMI,YAAYtB,YAExC,kBAAC,EAAD,CAAab,SAAUoC,KAAKd,eAAgBrB,QAASmC,KAAKnC,UAC1D,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAMM,KAAM4B,KAAKL,MAAMG,qB,GA5CfI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0afa59eb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchField = ({onSearch,onEnter}) => {\r\n\treturn(\r\n\t\t<div className='form_field'>\r\n\t\t\t<input \r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='Name' \r\n\t\t\tonChange={onSearch}\r\n\t\t\tonKeyDown={onEnter}/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchField;","import React from 'react';\r\nimport './index.css'\r\nconst Card = ({data}) => {\r\n\r\n\treturn(\r\n\t\t<div className='cards'>\r\n\t\t\t<h1>{data.country}</h1>\r\n\t\t\t<p>Active: {data.active}</p>\r\n\t\t\t<p>Cases: {data.cases}</p>\r\n\t        <p>Death: {data.deaths}</p>\r\n\t        <p>Recovered: {data.recovered}</p>\r\n\t        <p>Today Cases: {data.todayCases}</p>\r\n\t        <p>Today Death: {data.todayDeaths}</p>\r\n\t        <p>Critical: {data.critical}</p>\r\n\t        <p>Total Tests: {data.totalTests}</p>\r\n\t        <p>Cases Per Million: {data.casesPerOneMillion}</p>\r\n\t        <p>Deaths Per Million: {data.deathsPerOneMillion}</p>\r\n\t        <p>Testes Per Million: {data.testsPerOneMillion}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React,{Component} from 'react';\nimport SearchField from './searchField.js'\nimport Card from './cards.js'\nimport './index.css'\n\nclass App extends Component {\n\n  constructor(){\n    super()\n    this.state = {\n      data_global: [],\n      searchField: '',\n      data_country: []\n    }\n  }\n\n  async componentDidMount(){\n    const response = await fetch('https://coronavirus-19-api.herokuapp.com/all')\n    const data = await response.json()\n    this.setState({ data_global: data});\n    const response_country = await fetch('https://coronavirus-19-api.herokuapp.com/countries/india')\n    const data_country = await response_country.json()\n    this.setState({ data_country: data_country});\n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchField: event.target.value})\n  }\n\n  onEnter = async (event) => {\n    if (event.key === 'Enter')\n    {\n      const response = await fetch(`https://coronavirus-19-api.herokuapp.com/countries/${this.state.searchField}`)\n      const data = await response.json()\n      this.setState({ data_country: data});\n    }\n  }\n\n  render(){\n    return(\n      <div>\n        <div className=\"box\">\n          <h1>Global</h1>\n          <p>Cases: {this.state.data_global.cases}</p>\n          <p>Death: {this.state.data_global.deaths}</p>\n          <p>Recovered: {this.state.data_global.recovered}</p>\n        </div>\n        <SearchField onSearch={this.onSearchChange} onEnter={this.onEnter}/>\n        <div className=\"box\">\n          <Card data={this.state.data_country}/>\n        </div>\n      </div>\n    );  \n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}